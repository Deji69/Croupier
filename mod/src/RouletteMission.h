#pragma once
#include <optional>
#include <string>
#include <unordered_map>

enum class eMission
{
	NONE,
	ICAFACILITY_ARRIVAL,
	ICAFACILITY_GUIDED,
	ICAFACILITY_FREEFORM,
	ICAFACILITY_FINALTEST,
	PARIS_SHOWSTOPPER,
	PARIS_HOLIDAYHOARDERS,
	SAPIENZA_WORLDOFTOMORROW,
	SAPIENZA_THEICON,
	SAPIENZA_LANDSLIDE,
	SAPIENZA_THEAUTHOR,
	MARRAKESH_GILDEDCAGE,
	MARRAKESH_HOUSEBUILTONSAND,
	BANGKOK_CLUB27,
	BANGKOK_THESOURCE,
	COLORADO_FREEDOMFIGHTERS,
	//COLORADO_THEVECTOR,
	HOKKAIDO_SITUSINVERSUS,
	HOKKAIDO_SNOWFESTIVAL,
	HOKKAIDO_PATIENTZERO,
	HAWKESBAY_NIGHTCALL,
	MIAMI_FINISHLINE,
	MIAMI_ASILVERTONGUE,
	SANTAFORTUNA_THREEHEADEDSERPENT,
	SANTAFORTUNA_EMBRACEOFTHESERPENT,
	MUMBAI_CHASINGAGHOST,
	MUMBAI_ILLUSIONSOFGRANDEUR,
	WHITTLETON_ANOTHERLIFE,
	WHITTLETON_ABITTERPILL,
	ISLEOFSGAIL_THEARKSOCIETY,
	NEWYORK_GOLDENHANDSHAKE,
	HAVEN_THELASTRESORT,
	DUBAI_ONTOPOFTHEWORLD,
	DARTMOOR_DEATHINTHEFAMILY,
	BERLIN_APEXPREDATOR,
	CHONGQING_ENDOFANERA,
	MENDOZA_THEFAREWELL,
	CARPATHIAN_UNTOUCHABLE,
	AMBROSE_SHADOWSINTHEWATER,
};

inline std::unordered_map<std::string, eMission> missionsByCodename = {
	{"FREEFORM", eMission::ICAFACILITY_FREEFORM},
	{"POLARBEAR", eMission::ICAFACILITY_FINALTEST},
	{"FINALTEST", eMission::ICAFACILITY_FINALTEST},
	{"PEACOCK", eMission::PARIS_SHOWSTOPPER},
	{"PARISNOEL", eMission::PARIS_HOLIDAYHOARDERS},
	{"OCTOPUS", eMission::SAPIENZA_WORLDOFTOMORROW},
	{"COPPERHEAD", eMission::SAPIENZA_THEICON},
	{"MAMBA", eMission::SAPIENZA_LANDSLIDE},
	{"LASTWORD", eMission::SAPIENZA_THEAUTHOR},
	{"SPIDER", eMission::MARRAKESH_GILDEDCAGE},
	{"PYTHON", eMission::MARRAKESH_HOUSEBUILTONSAND},
	{"TIGER", eMission::BANGKOK_CLUB27},
	{"TAMAGOZAKE", eMission::BANGKOK_THESOURCE},
	{"BULL", eMission::COLORADO_FREEDOMFIGHTERS},
	{"SNOWCRANE", eMission::HOKKAIDO_SITUSINVERSUS},
	{"MAMUSHI", eMission::HOKKAIDO_SNOWFESTIVAL},
	{"BRONX", eMission::HOKKAIDO_PATIENTZERO},
	{"SHEEP", eMission::HAWKESBAY_NIGHTCALL},
	{"FLAMINGO", eMission::MIAMI_FINISHLINE},
	{"COTTONMOUTH", eMission::MIAMI_ASILVERTONGUE},
	{"HIPPO", eMission::SANTAFORTUNA_THREEHEADEDSERPENT},
	{"ANACONDA", eMission::SANTAFORTUNA_EMBRACEOFTHESERPENT},
	{"MONGOOSE", eMission::MUMBAI_CHASINGAGHOST},
	{"KINGCOBRA", eMission::MUMBAI_ILLUSIONSOFGRANDEUR},
	{"SKUNK", eMission::WHITTLETON_ANOTHERLIFE},
	{"GARTERSNAKE", eMission::WHITTLETON_ABITTERPILL},
	{"MAGPIE", eMission::ISLEOFSGAIL_THEARKSOCIETY},
	{"RACCOON", eMission::NEWYORK_GOLDENHANDSHAKE},
	{"STINGRAY", eMission::HAVEN_THELASTRESORT},
	{"GECKO", eMission::DUBAI_ONTOPOFTHEWORLD},
	{"BULLDOG", eMission::DARTMOOR_DEATHINTHEFAMILY},
	{"FOX", eMission::BERLIN_APEXPREDATOR},
	{"RAT", eMission::CHONGQING_ENDOFANERA},
	{"LLAMA", eMission::MENDOZA_THEFAREWELL},
	{"WOLVERINE", eMission::CARPATHIAN_UNTOUCHABLE},
	{"DUGONG", eMission::AMBROSE_SHADOWSINTHEWATER},
};

inline auto getMissionByCodename(const std::string& codename) {
	auto it = missionsByCodename.find(codename);
	if (it != missionsByCodename.end()) return it->second;
	return eMission::NONE;
}

inline auto getMissionCodename(eMission mission) -> std::optional<std::string_view> {
	auto it = find_if(cbegin(missionsByCodename), cend(missionsByCodename), [mission](const std::pair<std::string, eMission>& v) {
		return v.second == mission;
	});
	if (it == cend(missionsByCodename)) return std::nullopt;
	return std::make_optional<std::string_view>(it->first);
}
