using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;

namespace Croupier {
	public class StatisticsViewModel : ViewModel {
		public string Name { get; set; }
		public string Description { get; set; }
		public object Value { get; set; }
	}

	public class HistoryViewModel(SpinCompletionStats stats) : ViewModel, IEditableObject {
		public string Mission { get; set; }
		public string Spin { get; set; }
		public string IGT { get; set; }
		public string Entrance { get; set; }

		public string Comment {
			get => comment;
			set {
				if (value.Length > 1000)
					comment = value[0..1000];
				else
					comment = value;
			}
		}

		private readonly SpinCompletionStats stats = stats;
		private bool editing = false;
		private string comment = "";
		private string commentTemp = "";

		void IEditableObject.BeginEdit() {
			if (editing) return;
			commentTemp = Comment;
			editing = true;
		}

		void IEditableObject.CancelEdit() {
			if (!editing) return;
			Comment = commentTemp;
			editing = false;
		}

		void IEditableObject.EndEdit() {
			if (!editing) return;
			commentTemp = "";
			editing = false;

			stats.Comment = Comment;
			Config.Save();
		}
	}

	public class StatisticsWindowViewModel : ViewModel {
		public ObservableCollection<StatisticsViewModel> MainStats { get; set; } = [];
		public ObservableCollection<HistoryViewModel> History { get; set; } = [];

		public StatisticsWindowViewModel() {
			Update();
			UpdateHistory();

			Config.OnSave += (object sender, int _) => {
				Update();
				UpdateHistory();
			};
		}

		public void UpdateHistory() {
			History.Clear();

			foreach (var spin in Config.Default.Stats.SpinStats) {
				foreach (var c in spin.Value.Completions) {
					History.Add(new(c) {
						Entrance = Locations.GetEntranceCommonName(c.StartLocation),
						IGT = this.FormatIGT(c.IGT),
						Mission = Mission.GetMissionName(c.Mission),
						Spin = spin.Key,
						Comment = c.Comment ?? "",
					});
				}
			}
		}

		public void Update() {
			MainStats.Clear();
			MainStats.Add(new() {
				Name = "Spins",
				Description = "Total spins created.",
				Value = Config.Default.Stats.NumCustomSpins + Config.Default.Stats.NumRandomSpins,
			});
			MainStats.Add(new() {
				Name = "Random Spins",
				Description = "Spin randomly generated by Croupier.",
				Value = Config.Default.Stats.NumRandomSpins,
			});
			MainStats.Add(new() {
				Name = "Custom Spins",
				Description = "Spins edited/pasted/received and attempted.",
				Value = Config.Default.Stats.NumCustomSpins,
			});
			MainStats.Add(new() {
				Name = "Top Streak",
				Description = "Highest number of consecutive SA spin completions.",
				Value = Config.Default.Stats.TopStreak,
			});
			MainStats.Add(new() {
				Name = "Attempts",
				Description = "Number of mission attempts.",
				Value = Config.Default.Stats.NumAttempts,
			});
			MainStats.Add(new() {
				Name = "Spin Attempts",
				Description = "Unique spin attempts.",
				Value = Config.Default.Stats.NumUniqueAttempts,
			});
			MainStats.Add(new() {
				Name = "Spin Wins",
				Description = "Total SA spin completions.",
				Value = Config.Default.Stats.NumWins,
			});
			MainStats.Add(new() {
				Name = "Messy Spin Completions",
				Description = "You didn't get SA, but at least you killed the targets and escaped...",
				Value = Config.Default.Stats.NumNonSAWins,
			});
			MainStats.Add(new() {
				Name = "Unique Spin Wins",
				Description = "SA completions of unique spins.",
				Value = Config.Default.Stats.NumUniqueWins,
			});

			MainStats.Add(new() {
				Name = "Target Kills",
				Description = "Total number of times you've killed a target with the correct conditions.",
				Value = Config.Default.Stats.NumValidKills,
			});

			var fastestIGT = "N/A";
			var fastestIGTMission = "N/A";
			var fastestIGTSpin = "N/A";

			var fastestIGTSpinStats = Config.Default.Stats.GetFastestIGTSpinStats();
			if (fastestIGTSpinStats != null) {
				fastestIGT = this.FormatIGT(fastestIGTSpinStats.GetFastestIGTCompletion().IGT);
				fastestIGTMission = Mission.GetMissionName(fastestIGTSpinStats.Mission);
				fastestIGTSpin = fastestIGTSpinStats.Spin;
			}

			MainStats.Add(new() {
				Name = "Fastest IGT",
				Description = "Fastest IGT (in-game time) achieved on a spin.",
				Value = fastestIGT,
			});
			MainStats.Add(new() {
				Name = "Fastest IGT Mission",
				Description = "The mission you got your fastest IGT on.",
				Value = fastestIGTMission,
			});
			MainStats.Add(new() {
				Name = "Fastest IGT Spin",
				Description = "is the spin you gained your fastest IGT with.",
				Value = fastestIGTSpin,
			});

			var mostSpunMission = "N/A";
			var mostPlayedMission = "N/A";
			var mostWonMission = "N/A";

			var mostSpunMissionStats = Config.Default.Stats.GetMostSpunMissionStats();
			if (mostSpunMissionStats != null) {
				mostSpunMission = Mission.GetMissionName(mostSpunMissionStats.Mission) + $" ({mostSpunMissionStats.NumSpins})";
			}

			var mostPlayedMissionStats = Config.Default.Stats.GetMostPlayedMissionStats();
			if (mostPlayedMissionStats != null) {
				mostPlayedMission = Mission.GetMissionName(mostPlayedMissionStats.Mission) + $" ({mostPlayedMissionStats.NumAttempts})";
			}

			var mostWonMissionStats = Config.Default.Stats.GetMostWonMissionStats();
			if (mostWonMissionStats != null) {
				mostWonMission = Mission.GetMissionName(mostWonMissionStats.Mission) + $" ({mostWonMissionStats.NumWins})";
			}

			MainStats.Add(new() {
				Name = "Most Spun Mission",
				Description = mostSpunMissionStats != null ? $"is the most spun mission (spun {mostSpunMissionStats.NumSpins} times)" : "is your most spun mission.",
				Value = mostSpunMission,
			});
			MainStats.Add(new() {
				Name = "Most Attempted Mission",
				Description = mostPlayedMissionStats != null ? $"is your most played mission (played {mostPlayedMissionStats.NumAttempts} times)" : "is your most played mission.",
				Value = mostPlayedMission,
			});
			MainStats.Add(new() {
				Name = "Most Won Mission",
				Description = mostWonMissionStats != null ? $"is the mission you've completed the most spins in ({mostWonMissionStats.NumWins} wins)" : "is your most played mission.",
				Value = mostWonMission,
			});

			var mostUsedEntrance = Config.Default.Stats.GetMostUsedEntrance();
			var mostUsedEntranceStr = "N/A";
			if (mostUsedEntrance != null)
				mostUsedEntranceStr = mostUsedEntrance.Disguise.Length > 0 ? mostUsedEntrance.Disguise : mostUsedEntrance.Name;

			MainStats.Add(new() {
				Name = "Top Starting Location",
				Description = "is the starting location you have won the most spins from",
				Value = mostUsedEntranceStr,
			});
		}

		private string FormatIGT(double igt) {
			var ts = TimeSpan.FromSeconds(igt);
			var str = "";

			if (ts.TotalHours >= 1)
				str = ts.ToString(@"h\h\ m\m\ ss\s");
			else if (ts.TotalMinutes >= 1)
				str = ts.ToString(@"m\m\ ss\s");
			else
				str = ts.ToString(@"ss\s");

			var frac = ts.ToString(@"FFF").TrimEnd('0');

			return str + (frac.Length > 0 ? $" {frac}ms" : "");
		}
	}
	
	public partial class StatisticsWindow : Window {
		private readonly StatisticsWindowViewModel viewModel = new();

		public StatisticsWindow() {
			DataContext = viewModel;
			InitializeComponent();
		}

		public override void OnApplyTemplate() {
			base.OnApplyTemplate();
		}
	}
}
